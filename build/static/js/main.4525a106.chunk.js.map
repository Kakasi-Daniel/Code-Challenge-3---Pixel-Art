{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["colors","App","useState","gridLayout","setGridLayout","grid","setGrid","colorsButtons","setColorsButtons","gridRef","useRef","colorStateRef","changeCellColorHandler","e","target","style","background","current","changeMainColorHandler","colorToChange","color","backgroundColor","useEffect","colorsBtns","forEach","index","push","onClick","className","rows","newGrid","i","Math","random","bind","ref","map","row","html2canvas","then","canvas","link","document","createElement","href","toDataURL","download","body","appendChild","click","removeChild","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sPAIMA,EAAS,CACb,MACA,SACA,cACA,OACA,SACA,SACA,QACA,QACA,QACA,SACA,SA6GaC,MA1Gf,WACE,MAAoCC,mBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA0CJ,mBAAS,IAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACMC,EAAUC,mBACVC,EAAgBD,iBAAO,OAiBvBE,EAAyB,SAACC,GAC1BA,EAAEC,OAAOC,MAAMC,aAAeL,EAAcM,QAC9CJ,EAAEC,OAAOC,MAAMC,WAAa,mBAE5BH,EAAEC,OAAOC,MAAMC,WAAaL,EAAcM,SAIxCC,EAAyB,SAACL,GAC9B,IAAIM,EAxBYC,EAyBhBD,EAAgBN,EAAEC,OAAOC,MAAMM,gBAzBfD,EA0BPD,EAzBTR,EAAcM,QAAUG,GAiE1B,OArCAE,qBAAU,WACR,IAAMC,EAAa,GACnBvB,EAAOwB,SAAQ,SAACJ,EAAOK,GACrBF,EAAWG,KACT,qBAEEC,QAAST,EACTU,UAAU,QACVb,MAAO,CAAEM,gBAAiBD,IAJ5B,gBACgBK,EADhB,YACyBL,QAQ7BZ,EAAiBe,KAChB,IAEHD,qBAAU,WAIR,IAHA,IAAIO,EAAO,GACLC,EAAU,GAEPC,EAAI,EAAGA,EAAI5B,EAAaA,EAAY4B,IAC3CF,EAAKH,KACH,qBACEC,QAASf,EAETgB,UAAU,QAHZ,cAEcG,EAAI,EAFlB,YAEuBC,KAAKC,aAIzBF,EAAI,GAAK5B,IAAe,IAC3B2B,EAAQJ,KAAKG,GACbA,EAAO,IAIXvB,EAAQwB,KACP,CAAC3B,IAGF,qBAAKyB,UAAU,MAAf,SACE,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,WAAf,UACE,wBAAQA,UAAU,MAAMD,QAASvB,EAAc8B,KAAK,KAAM,GAA1D,iBAGA,wBAAQN,UAAU,MAAMD,QAASvB,EAAc8B,KAAK,KAAM,IAA1D,mBAGA,wBAAQN,UAAU,MAAMD,QAASvB,EAAc8B,KAAK,KAAM,IAA1D,mBAGA,wBAAQN,UAAU,MAAMD,QAASvB,EAAc8B,KAAK,KAAM,IAA1D,sBAIF,qBAAKN,UAAU,WAAf,SAA2BrB,IAC3B,qBAAK4B,IAAK1B,EAASmB,UAAU,aAA7B,SACGvB,EAAK+B,KAAI,SAACC,EAAKZ,GAAN,OACR,qBAA6BG,UAAU,MAAvC,SACGS,GADH,aAAgBZ,EAAQ,SAK5B,wBAAQE,QAvFa,WACzBW,IAAY7B,EAAQQ,SAASsB,MAAK,SAAAC,GAChC,IAAIC,EAAOC,SAASC,cAAc,KAClCF,EAAKG,KAAOJ,EAAOK,YACnBJ,EAAKK,SAAW,aAChBJ,SAASK,KAAKC,YAAYP,GAC1BA,EAAKQ,QACLP,SAASK,KAAKG,YAAYT,OAgFab,UAAU,MAA/C,oCCxGOuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnB,SAASoB,eAAe,SAM1BX,M","file":"static/js/main.4525a106.chunk.js","sourcesContent":["import './App.css';\nimport { useRef, useState, useEffect } from 'react';\nimport html2canvas from 'html2canvas';\n\nconst colors = [\n  'red',\n  'purple',\n  'greenyellow',\n  'blue',\n  'yellow',\n  'orange',\n  'white',\n  'black',\n  'beige',\n  'salmon',\n  'brown',\n];\n\nfunction App() {\n  const [gridLayout, setGridLayout] = useState(8);\n  const [grid, setGrid] = useState([]);\n  const [colorsButtons, setColorsButtons] = useState([]);\n  const gridRef = useRef();\n  const colorStateRef = useRef('red');\n\n  const setColor = (color) => {\n    colorStateRef.current = color;\n  };\n\n  const downloadArtHandler = () => {\n    html2canvas(gridRef.current).then(canvas => {\n      let link = document.createElement('a');\n      link.href = canvas.toDataURL();\n      link.download = 'yourPixArt';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    });\n  };\n\n  const changeCellColorHandler = (e) => {\n    if (e.target.style.background === colorStateRef.current) {\n      e.target.style.background = 'rgb(255,255,255)';\n    } else {\n      e.target.style.background = colorStateRef.current;\n    }\n  };\n\n  const changeMainColorHandler = (e) => {\n    let colorToChange = '';\n    colorToChange = e.target.style.backgroundColor;\n    setColor(colorToChange);\n  };\n\n  useEffect(() => {\n    const colorsBtns = [];\n    colors.forEach((color, index) => {\n      colorsBtns.push(\n        <div\n          key={`colors${index}_${color}`}\n          onClick={changeMainColorHandler}\n          className=\"color\"\n          style={{ backgroundColor: color }}\n        ></div>\n      );\n    });\n\n    setColorsButtons(colorsBtns);\n  }, []);\n\n  useEffect(() => {\n    let rows = [];\n    const newGrid = [];\n\n    for (let i = 0; i < gridLayout * gridLayout; i++) {\n      rows.push(\n        <div\n          onClick={changeCellColorHandler}\n          key={`cell${i + 1}_${Math.random()}`}\n          className=\"cell\"\n        ></div>\n      );\n      if ((i + 1) % gridLayout === 0) {\n        newGrid.push(rows);\n        rows = [];\n      }\n    }\n\n    setGrid(newGrid);\n  }, [gridLayout]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"content\">\n        <div className=\"controls\">\n          <button className=\"btn\" onClick={setGridLayout.bind(null, 8)}>\n            8x8\n          </button>\n          <button className=\"btn\" onClick={setGridLayout.bind(null, 12)}>\n            12x12\n          </button>\n          <button className=\"btn\" onClick={setGridLayout.bind(null, 16)}>\n            16x16\n          </button>\n          <button className=\"btn\" onClick={setGridLayout.bind(null, 32)}>\n            32x32\n          </button>\n        </div>\n        <div className=\"controls\">{colorsButtons}</div>\n        <div ref={gridRef} className=\"pixelsgrid\">\n          {grid.map((row, index) => (\n            <div key={`row${index + 1}`} className=\"row\">\n              {row}\n            </div>\n          ))}\n        </div>\n        <button onClick={downloadArtHandler} className=\"btn\">\n          Download you art\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}