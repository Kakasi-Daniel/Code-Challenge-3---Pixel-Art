{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["colors","App","useState","gridLayout","setGridLayout","grid","setGrid","colorInput","setColorInput","gridInput","setGridInput","colorInputError","setColorInputError","gridInputError","setGridInputError","colorsButtons","setColorsButtons","color","_setColor","colorRef","useRef","gridRef","setColor","col","current","changeCellColorHandler","e","target","style","background","changeMainColorHandler","useCallback","colorToChange","backgroundColor","useEffect","colorsBtns","forEach","index","push","onClick","className","rows","newGrid","i","Math","random","bind","onSubmit","preventDefault","htmlFor","value","onChange","s","Option","type","id","placeholder","floor","min","ref","map","row","html2canvas","then","canvas","link","document","createElement","href","toDataURL","download","body","appendChild","click","removeChild","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.304a419d.chunk.js","sourcesContent":["import './App.css';\nimport { useRef, useState, useEffect, useCallback } from 'react';\nimport html2canvas from 'html2canvas';\n\nconst colors = ['red','purple','greenyellow','blue','yellow','orange','white','black','beige','salmon','brown'];\n\nfunction App() {\n  const [gridLayout, setGridLayout] = useState(8);\n  const [grid, setGrid] = useState([]);\n  const [colorInput, setColorInput] = useState('');\n  const [gridInput, setGridInput] = useState('');\n  const [colorInputError, setColorInputError] = useState(null);\n  const [gridInputError, setGridInputError] = useState(null);\n  const [colorsButtons, setColorsButtons] = useState([]);\n  const [color,_setColor] = useState('red')\n  const colorRef = useRef(color);\n  const gridRef = useRef();\n\n  const setColor = (col) =>{\n    colorRef.current = col;\n    _setColor(col)\n  }\n\n  const colorInputChangeHandler = (e) => {\n    var s = new Option().style;\n    s.color = e.target.value;\n    if(s.color === e.target.value){\n      setColorInputError(null)\n    }else{\n      setColorInputError('errorBorder')\n    }\n    setColorInput(e.target.value)\n  };\n\n  const gridInputChangeHandler = (e) => {\n    if(+e.target.value < 3){\n      setGridInputError('errorBorder')\n    }else{\n      setGridInputError(null)\n    }\n    setGridInput(Math.floor(+e.target.value))\n  };\n\n  const customColorHandler = (e) => {\n    e.preventDefault()\n    if(!colorInputError && colorInput !== \"\"){\n      setColor(colorInput)\n    }\n  };\n\n  const customGridHandler = (e) => {\n    e.preventDefault()\n    if(!gridInputError && gridInput !== \"\"){\n      setGridLayout(gridInput)\n    }\n  };\n\n  const downloadArtHandler = () => {\n    html2canvas(gridRef.current).then((canvas) => {\n      let link = document.createElement('a');\n      link.href = canvas.toDataURL();\n      link.download = 'yourPixArt';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    });\n  };\n\n  const changeCellColorHandler = (e) => {\n    if (e.target.style.background === colorRef.current) {\n      e.target.style.background = 'rgb(255,255,255)';\n    } else {\n      e.target.style.background = colorRef.current;\n    }\n  };\n\n  const changeMainColorHandler = useCallback((e) => {\n    let colorToChange = '';\n    colorToChange = e.target.style.backgroundColor;\n    setColor(colorToChange);\n  }, []);\n\n  useEffect(() => {\n    const colorsBtns = [];\n    colors.forEach((color, index) => {\n      colorsBtns.push(<div  key={`colors${index}_${color}`} onClick={changeMainColorHandler} className=\"color\"  style={{ backgroundColor: color }}  ></div>);\n    });\n\n    setColorsButtons(colorsBtns);\n  }, [changeMainColorHandler]);\n\n  useEffect(() => {\n    let rows = [];\n    const newGrid = [];\n\n    for (let i = 0; i < gridLayout * gridLayout; i++) {\n      rows.push(<div  onClick={changeCellColorHandler}  key={`cell${i + 1}_${Math.random()}`} className=\"cell\" ></div>);\n      if ((i + 1) % gridLayout === 0) {\n        newGrid.push(rows);\n        rows = [];\n      }\n    }\n\n    setGrid(newGrid);\n  }, [gridLayout]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"content\">\n        <h1>Pixel Art</h1>\n        <div className=\"controls\">\n          <button className=\"btn\" onClick={setGridLayout.bind(null, 8)}>8x8</button>\n          <button className=\"btn\" onClick={setGridLayout.bind(null, 12)}>12x12</button>\n          <button className=\"btn\" onClick={setGridLayout.bind(null, 16)}>16x16</button>\n          <button className=\"btn\" onClick={setGridLayout.bind(null, 32)}>32x32</button>\n        </div>\n        <div className=\"controls\">{colorsButtons}</div>\n        <div className=\"controls\">\n          <form onSubmit={customColorHandler} className=\"custom custom--color\">\n            <label htmlFor=\"color\">Custom color:\n              <input className={colorInputError} value={colorInput} onChange={colorInputChangeHandler} type=\"text\"  id=\"color\"  placeholder=\"pink\"  />\n            </label>\n            <button type=\"submit\" className=\"btn btn--set\">Set</button>\n            </form>\n          <div className=\"currentColor\" style={{backgroundColor:color}}></div>\n          <form onSubmit={customGridHandler} className=\"custom custom--grid\">\n            <label htmlFor=\"grid\">Custom grid:\n              <input  className={gridInputError}  value={gridInput} onChange={gridInputChangeHandler}  placeholder=\"3 to infinity\" type=\"number\"  min=\"3\" id=\"grid\"  />\n            </label>\n            <button type=\"submit\" className=\"btn btn--set\">Set</button>\n            </form>\n        </div>\n        <div ref={gridRef} className=\"pixelsgrid\">\n          {grid.map((row, index) => (<div key={`row${index + 1}`} className=\"row\">{row}</div>))}\n        </div>\n        <button onClick={downloadArtHandler} className=\"btn btn--download\">Download your art</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}